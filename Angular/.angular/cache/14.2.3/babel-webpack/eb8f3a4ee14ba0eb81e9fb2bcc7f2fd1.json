{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject, takeUntil } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/general.service\";\nimport * as i2 from \"@angular/common\";\nexport let SengokuComponent = /*#__PURE__*/(() => {\n  class SengokuComponent {\n    constructor(generalService) {\n      this.generalService = generalService;\n      this.unsubOnDestroy = new Subject();\n      this.backToProjectList = new EventEmitter();\n    }\n\n    ngOnInit() {\n      this.isDarkMode = this.generalService.GetDarkModeStatus();\n      this.generalService.subjectToggleDarkMode.pipe(takeUntil(this.unsubOnDestroy)).subscribe({\n        next: () => {\n          this.isDarkMode = !this.isDarkMode;\n        }\n      });\n      this.projectsSectionRef = document.querySelector(\"#projects\");\n    }\n\n    ngOnDestroy() {\n      this.unsubOnDestroy.next(true);\n      this.unsubOnDestroy.complete();\n    }\n\n    BackToProjectList() {\n      this.backToProjectList.emit();\n      this.projectsSectionRef.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n\n  }\n\n  SengokuComponent.ɵfac = function SengokuComponent_Factory(t) {\n    return new (t || SengokuComponent)(i0.ɵɵdirectiveInject(i1.GeneralService));\n  };\n\n  SengokuComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SengokuComponent,\n    selectors: [[\"app-sengoku\"]],\n    outputs: {\n      backToProjectList: \"backToProjectList\"\n    },\n    decls: 21,\n    vars: 4,\n    consts: [[1, \"project-container\"], [3, \"ngClass\"], [1, \"text-primary\", 3, \"ngClass\"], [1, \"project-details\", 3, \"ngClass\"], [\"src\", \"../../../assets/images/projects/sengoku/project-sengoku.jpg\", \"alt\", \"sengoku image\", 1, \"main-image\"], [1, \"project-description\"], [1, \"text-secondary\"], [\"src\", \"https://www.youtube.com/embed/3nDrqtOcw1k\", \"title\", \"YouTube video player\", \"frameborder\", \"0\", \"allow\", \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\", \"allowfullscreen\", \"\"], [1, \"project-gallery\"], [\"src\", \"../../../assets/images/projects/sengoku/1.jpg\", \"alt\", \"sengoku-photo-1\"], [\"src\", \"../../../assets/images/projects/sengoku/2.jpg\", \"alt\", \"sengoku-photo-2\"], [\"src\", \"../../../assets/images/projects/sengoku/3.jpg\", \"alt\", \"sengoku-photo-3\"], [\"src\", \"../../../assets/images/projects/sengoku/4.jpg\", \"alt\", \"sengoku-photo-4\"], [\"type\", \"button\", 1, \"back-button\", 3, \"ngClass\", \"click\"]],\n    template: function SengokuComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\", 1);\n        i0.ɵɵtext(2, \"Sengoku Rhythm\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"p\", 2);\n        i0.ɵɵtext(4, \" Sengoku Rhythm is a rhythm game where two players fight an honorable Samurai duel by taking turns playing a Taiko and Shakuhachi. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 3);\n        i0.ɵɵelement(6, \"img\", 4);\n        i0.ɵɵelementStart(7, \"div\", 5)(8, \"p\", 6);\n        i0.ɵɵtext(9, \" The taiko and shakuhachi are simulated using alternative controllers to play the corresponding notes on the screen scrolling from the right. Warriors will play a series of beats in the form of tomoe symbols to deal damage to the opposing warrior. If a warrior plays all the notes correctly, the player will gain a morale boost and deal damage based on how much morale they currently have. On the other hand if the player misses a note or a couple of notes, the player will lose morale based on how much they missed and deal damage based on the newly decreased morale. To win the duel, the player with the lowest health will lose either at the end of the song or when their health is below zero. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"br\");\n        i0.ɵɵelementStart(11, \"p\", 6);\n        i0.ɵɵtext(12, \" To create the Taiko (drums), Arduino and Piezo discs were used to detect vibrations/hits from the player. Plastic baskets were used to imitate the drums and the discs were inserted under the basket where the player will hit the drum. In addition to the drums, the shakuhachi was also rapidly developed so that the players had to swap back and forth between the two instruments in combat. The flute used photoresistors (light detectors) to imitate the fingers covering the holes of the flute. The photoresistors were placed in each of the flute's holes and when the fingers were on top of the photoresistors, that was deemed as an input and it would hit the corresponding notes that came up. \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelement(13, \"iframe\", 7);\n        i0.ɵɵelementStart(14, \"div\", 8);\n        i0.ɵɵelement(15, \"img\", 9)(16, \"img\", 10)(17, \"img\", 11)(18, \"img\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"button\", 13);\n        i0.ɵɵlistener(\"click\", function SengokuComponent_Template_button_click_19_listener() {\n          return ctx.BackToProjectList();\n        });\n        i0.ɵɵtext(20, \"Back\");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", ctx.isDarkMode ? \"dark-mode-text\" : \"light-mode-text\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", ctx.isDarkMode ? \"dark-mode-text\" : \"light-mode-text\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", ctx.isDarkMode ? \"dark-mode-text\" : \"light-mode-text\");\n        i0.ɵɵadvance(14);\n        i0.ɵɵproperty(\"ngClass\", ctx.isDarkMode ? \"dark-mode-text dark-mode-button-border\" : \"light-mode-text light-mode-button-border\");\n      }\n    },\n    dependencies: [i2.NgClass],\n    styles: [\".project-container[_ngcontent-%COMP%]{margin-top:-10rem;display:flex;flex-direction:column;justify-content:center;align-items:center}.back-button[_ngcontent-%COMP%]{-webkit-appearance:none;appearance:none;background-color:transparent;border-radius:.2em;padding:.2em 1em;cursor:pointer;font-size:3rem;font-weight:700;transition:.5s cubic-bezier(.23,1,.32,1);-webkit-user-select:none;user-select:none;margin-top:5rem}.back-button[_ngcontent-%COMP%]:hover{background-color:#8f1d2140;border:.2rem solid #8F1D21}h1[_ngcontent-%COMP%]{font-size:5rem;margin-bottom:1em}.main-image[_ngcontent-%COMP%]{width:40rem;height:23rem;border-radius:.5rem}.text-primary[_ngcontent-%COMP%]{font-size:2rem;width:70rem;margin-bottom:2rem}.text-secondary[_ngcontent-%COMP%]{font-size:1.5rem;margin-left:4rem;width:50rem;line-height:1.5em}.project-details[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center}.project-description[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:center;align-items:flex-start}iframe[_ngcontent-%COMP%]{margin-top:5rem;width:64rem;height:36rem}.project-gallery[_ngcontent-%COMP%]{margin-top:5rem;display:flex;flex-direction:row;flex-wrap:wrap;justify-content:center;align-items:center;gap:3rem}.project-gallery[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{width:35rem;height:22rem}\"]\n  });\n  return SengokuComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}